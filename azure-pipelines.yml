# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DotNetCoreCLI@2
  displayName: DotNetCore publish
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '-c Release'
    zipAfterPublish: false

- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: '17.09.0-ce'

- task: Docker@2
  displayName: Docker build
  inputs:
    command: 'build'
    Dockerfile: '**/Dockerfile'
    arguments: '-t 542153354/dockerdemo:v1.0'
    
- task: CmdLine@2
  displayName: Docker push tencentyun
  inputs:
    script: |
      sudo docker login --username=100013768990 ccr.ccs.tencentyun.com
      sudo docker push ccr.ccs.tencentyun.com/542153354/dockerdemo:v1.0

- task: CmdLine@2
  displayName: DockerHub push
  inputs:
    script: |
        sudo docker login -u 542153354 -p $(DockerPassword)
        sudo docker tag dockerdemo ccr.ccs.tencentyun.com/542153354/dockerdemo:v1.0
        sudo docker push 542153354/dockerdemo:v1.0

- task: CmdLine@2
  displayName: Docker push
  inputs:
    script: 'docker push 542153354/dockerdemo:v1.0'

- task: CmdLine@2
  displayName: install sshpass
  inputs:
    script: |
      sudo apt-get install sshpass

- task: CmdLine@2
  displayName: pwd
  inputs:
    script: |
      pwd
      ls
      dir

- task: CmdLine@2
  displayName: deploy api to TencentCloud
  inputs:
    script: |
      sshpass -p "$(TencentCloudPassword)" ssh -o StrictHostKeyChecking=no -t -t ubuntu@$(TencentCloudIP) bash -s < deploy.sh

- task: CmdLine@2
  displayName: deploy api to AliCloud
  inputs:
    script: |
      sshpass -p "$(AliCloudPassword)" ssh -o StrictHostKeyChecking=no -t -t root@$(AliCloudIP) bash -s < deploy.sh

